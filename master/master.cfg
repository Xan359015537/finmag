# -*- python -*-

from buildbot.plugins import changes, schedulers, steps, util, worker


# BuildmasterConfig is read by Buildbot.
conf = BuildmasterConfig = {}


# Define worker and connection information.
workerNames = ["worker_{}".format(zI) for zI in range(1, 3)]
passes = ["pass_{}".format(zI) for zI in range(1, 3)]
slaves = [worker.Worker(workerNames[zJ], passes[zJ]) for zJ in range(2)]
slavePort = 9990

# Define Git repository poller, which polls for changes on some branches.
thisRepoName = "finmag"
thisRepoURL = "git://github.com/fangohr/{}".format(thisRepoName)
buildBranches = ["master"]

def shouldBuild(branchCheck):
    """
    Returns True if the branch should be built, and False otherwise.
    branchCheck could be a remote or local branch string.
    """
    if branchCheck == "HEAD":
        return False
    for branch in buildBranches:
        if branch == branchCheck.split("/")[-1]:
            return True
    return False

sourceChange = changes.GitPoller(thisRepoURL,
                                 branches=shouldBuild,
                                 project=thisRepoName,
                                 workdir="gitpoller",
                                 pollinterval=30,
                                 buildPushesWithNoCommits=True)

# Define operations to be conduced by the workers.
checkout = steps.Git(repourl=thisRepoURL,
                     haltOnFailure=True)

fastTests = steps.ShellCommand(name="Fast tests",
                               command=["make", "test-fast"],
                               haltOnFailure=True)

slowTests = steps.ShellCommand(name="Slow tests",
                               command=["make", "test-slow"],
                               haltOnFailure=True)

# Create build factories from operations, one for running tests, and one for
# performing builds.
fastTestFactory = util.BuildFactory()
fastTestFactory.addSteps([checkout, fastTests])
slowTestFactory = util.BuildFactory()
slowTestFactory.addSteps([checkout, slowTests])

# Create builders from the build factories, which use slave workers to complete
# tasks from the factories.
fastTestBuilder = util.BuilderConfig(name="test-fast", factory=fastTestFactory,
                      workernames=[slaves[zI].name for zI in range(2)])

slowTestBuilder = util.BuilderConfig(name="test-slow", factory=slowTestFactory,
                      workernames=[slaves[zI].name for zI in range(2)])

# Define a function to filter a commit message to determine if it should be
# built.
ciSkip = "[ci-skip]"
def skipCommit(change):
    if ciSkip in change.comments:
        return False
    return True

# Create schedulers. The first scheduler triggers tests from a change in the
# master branch of the source. The next scheduler triggers the slow tests if
# the fast tests are successful.
#
# The "fileIsImportant" argument filters the change itself, and is a misnomer.
fastTestScheduler = schedulers.SingleBranchScheduler(
                        name="fast-tests-from-polling",
                        change_filter=util.ChangeFilter(project=thisRepoName),
                        fileIsImportant=skipCommit,
                        builderNames=[str(fastTestBuilder.name)])

slowTestScheduler = schedulers.Dependent(name="slow-tests-after-fast-tests",
                        upstream=fastTestScheduler,
                        builderNames=[str(slowTestBuilder.name)])

# Create manually-triggered schedulers for each job as described above.
fastTestForce = schedulers.ForceScheduler(name="fast-tests-manual",
                    builderNames=[str(fastTestBuilder.name)])
slowTestForce = schedulers.ForceScheduler(name="slow-tests-manual",
                    builderNames=[str(slowTestBuilder.name)])

# Add resources to the configuration dictionary.
conf["builders"] = [fastTestBuilder, slowTestBuilder]
conf["workers"] = slaves
conf["protocols"] = {"pb": {"port": slavePort}}
conf["change_source"] = [sourceChange]
conf["schedulers"] = [fastTestScheduler, slowTestScheduler,
                      fastTestForce, slowTestForce]

# Some master configuration for the GUI.
masterPort = 8010
conf["title"] = "Finmag Buildbot"
conf["buildbotURL"] = "http://localhost:{}/".format(masterPort)
conf["www"] = dict(port=masterPort,
                   plugins={"waterfall_view": {}, "console_view": {}})
conf["db"] = {"db_url": "sqlite:///state.sqlite"}
